plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.nameslowly.coinauctions'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	// zipkin (spring boot3 부터는 sleuth 쓰고 micrometer 트레이싱)
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'io.github.openfeign:feign-micrometer'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// proemetheus
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// 공통모듈
	implementation(project(':com.nameslowly.coinauctions.common')) {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-jpa'
		exclude group: 'com.mysql', module: 'mysql-connector-j'
//		exclude group: 'org.springframewo rk.boot', module: 'spring-boot-starter-web'
	}

	// JWT Claims 추출위해 사용
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// 이거 안넣으면 Spring MVC found on classpath, which is incompatible with Spring Cloud Gateway.
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

//tasks.named('test') {
//	useJUnitPlatform()
//}
//
//def activeProfile = System.getenv('SPRING_PROFILES_ACTIVE') // application.yml 의 spring.profiles.active 값을 가져온다
//
//if (activeProfile == "dev") { // activeProfile이 prod가 아닌 경우에만 작업 실행
//	tasks.register("prepareKotlinBuildScriptModel") {
//		// 작업 내용 작성
//	}
//}