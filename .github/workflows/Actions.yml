# gitAction 이 실행할 workflow 를 정의하는 Actions.yml

name:  CI/CD with AWS EC2, ECR

# 이벤트 트리거. deploy 브렌치에 push 될 때 자동실행되는 파이프라인 스크립트
on:
  push:
    branches:
      - deploy

# 모든 Job에서 사용할 환경 변수
env:
  ECR_NAMESPACE: 12jo

# 3개의 job으로 구성
# 1. github 에서 코드를 가져와 Gradle 빌드 (build)
# 2. 그것을 도커 이미지로 빌드하고 ECR에 푸시 (Docker)
# 3. EC2로 접속하여 컨테이너 재실행 (Deploy)

jobs:
  ###################### 1. github 에서 코드를 가져와 Gradle 빌드 (build) #########################
  build:
    name: 프로젝트 빌드하기
    runs-on: ubuntu-latest # github 가 우분투에서 실행시킴
    strategy:
      matrix: # common 은 작업시 같이 빌드된다?
        service: [ com.nameslowly.coinauctions.auction,
                   com.nameslowly.coinauctions.auth,
                   com.nameslowly.coinauctions.bidwin,
                   com.nameslowly.coinauctions.chat,
                   com.nameslowly.coinauctions.coinpay,
                   com.nameslowly.coinauctions.gateway,
                   com.nameslowly.coinauctions.server
        ]

    steps: # 각 job에서 순차적으로 실행될 순서

        # 작업 이름(로그에 찍힐 것)
      - name: Checkout
        # 작업내용
        uses: actions/checkout@v1 # /github/workspace 으로 github 레포지토리 내용들이 복사되고 작업이 종료되면 다 삭제된다?

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew 에 파일 실행 권한주기
      - name: Set Gradlew Permission
        run: chmod +x ./gradlew
        working-directory: ${{ matrix.service }}

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build
        working-directory: ${{ matrix.service }}

      # 여기에 테스트를 진행해보자

  ###################### 2. 빌드한 프로젝트들을 도커 이미지로 빌드하고 ECR에 푸시 #########################
  docker:
    name: 도커 이미지로 만들고 ECR 올리기
    needs: build
    runs-on: ubuntu-latest

    steps: # test docker
      - name: Checkout 를 왜 하는거지?
        uses: actions/checkout@v1

      # AWS ECR 에 이미지 업로드 권한을 얻기 위해 인증 진행
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 작업중 폴더 좀 보자
      - name: List files in current directory
        run: ls -la

      # 혹시모르니 sh 파일에 권한부여해보자
      - name: Make the script executable
        run: chmod +x .github/workflows/dockerTagAndPush.sh

      # 권한 부여 됐나 겸사겸사 볼겸 workflows 들어가보자
      - name: List files in .github/workflows directory
        run: |
          cd .github/workflows
          ls -la
          cd ..
          cd ..

      # docker compose 를 이용해서 여러 이미지를 모두 빌드하고 + 별도의 script를 사용해서 이미지를 push 합니다.
      - name: 도커 이미지로 빌드하자 , Tag and Push docker image to AWS ECR
        run: docker compose -f .github/workflows/Actions-compose.yml build
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: ECR에 태그 달아서 이미지 푸시하자
        run: .github/workflows/dockerTagAndPush.sh
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

  ###################### 3. EC2로 접속하여 ECR에서 받은 이미지로 컨테이너 재실행 (Deploy) #########################
  deploy:
    name: EC2 들어가서 배포하기
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Docker
        uses: actions/checkout@v1

        # 파일 권한 설정 (777 : 소유자, 그룹 및 다른 사용자 모두 읽기 쓰기 실행 권한 갖도록
      - name: Set file permissions
        run: chmod 777 init.sql app-compose.yml db-compose.yml monitoring-compose.yml

        # (디버깅) 작업중 폴더 좀 보자
      - name: List files in current directory
        run: ls -a

        # (디버깅) 작업 디렉토리도 보자
      - name: Print working directory
        run: pwd

        # (디버깅) 파일존재하는지 보자
      - name: yml, sql 파일 있나?
        run: ls -l ./init.sql ./*.yml

        # init.sql 을 EC2로 복사
        # ---> tar achive 가 없다고 나와서 init.sql 만 따로 하니 뭔가 진전은 됨 (★뭐가 문제인거지? 다중파일을 못가져가나)
      - name: Copy init.sql to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: ./init.sql
          target: "/home/ubuntu" # target 은 디렉토리임. target directory 아래에 같은 이름의 파일로 옮겨진다.
          debug: true # 추가: 디버그 모드 활성화 (로그좀 더 보려고)

        # yml 들을 EC2로 복사 
        # ---> EC2 ssh 포트를 ipv6에 대해서도 열어놓아봄 fail
        # ---> EC2 내에 들어가 ufw(Uncomplicated Firewall) 활성화 - allow port 22, 22(v6) 시키고 다시 도전 fail
        # ---> timeout 늘리고 다시도전 fail
        # ---> EC2 secret 들 재설정해봄 (★ 요문제였나... pem에서 본문만 넣어야하는?)
      - name: Copy .*yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: ./*.yml
          target: "/home/ubuntu"
          debug: true
          timeout: 120s

        # SSH를 통해 EC2 접속하고 컨테이너 재실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3

        # EC2 접속하는 시크릿 설정
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REGISTRY, ECR_NAMESPACE

          # ECR에서 도커 컴포즈에 정의된 이미지들을 가져오는 pull

          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            docker compose version # 도커 버젼 확인 (혹시 - 가 생략되서그런가싶어서 다시 넣어봄)

            # 종료된 컨테이너 삭제
            docker container prune -f
            
            # 기존 이미지 삭제함
            # ---> 해당 docker compose 로 만든 이미지만 삭제한다고함
            docker-compose -f db-compose.yml down --rmi all -v
            docker-compose -f app-compose.yml down --rmi all -v         
          
            docker-compose -f db-compose.yml down -v
            sleep 60 # db 인간적으로 컨테이너 내려가는 시간좀 주자
            docker-compose -f app-compose.yml down -v
            sleep 60 # db 인간적으로 컨테이너 내려가는 시간좀 주자

            docker ps -a # 컨테이너 다 내려갔는지 보자

            docker-compose -f db-compose.yml pull
            docker-compose -f app-compose.yml pull
            sleep 60 # db 인간적으로 이미지 받는 시간좀 주자
          
            docker images # 받는 이미지도 한 번 보자
            docker ps -a # 컨테이너 상태 다시보자
            
            docker-compose -f db-compose.yml up -d
            sleep 60 # db 띄울때까지 좀 쉬렴
            docker-compose -f app-compose.yml up -d